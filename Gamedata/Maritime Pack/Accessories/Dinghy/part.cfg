PART
{
	name = FS_Dinghy
	module = Part
	author = Fengist
	mesh = model.mu
	rescaleFactor = .2
	node_attach = 0.0, 0.0, 1.0, 0.0, 0.0, -1.0
	node_stack_bottom = 0.0, 0.0, 1.0, 0.0, .0, 1.0, 1
	TechRequired = commandModules
	entryCost = 2800
	cost = 450
	category = Utility
	subcategory = 0
	title = Inflatable Dinghy
	manufacturer = Fengist's Shipyard
	description = Why a dinghy you ask? Have you ever tried pushing a 100 ton cargo ship off the beach? While it's not super fast, it is super funny. Battery sold separately.
	attachRules = 1,1,0,1,1
	mass = 0.001
	dragModelType = default
	maximum_drag = 0.1
	minimum_drag = 0.05
	angularDrag = 1.5
	crashTolerance = 12
	maxTemp = 1200 // = 1200
	explosionPotential = 0
	vesselType = Rover
	MODULE
	{
		name = ModuleResourceIntake
		resourceName = IntakeAir
		checkForOxygen = true
		area = 0.006
		intakeSpeed = 10
		intakeTransformName = Intake
	}
	RESOURCE
	{
		name = IntakeAir
		amount = 0.4
		maxAmount = 0.4
	}
	MODULE
	{
		name = ModuleReactionWheel
		PitchTorque = .7
		YawTorque = .7
		RollTorque = .7
		RESOURCE
		{
			name = ElectricCharge
			rate = .3
		}
	}
	RESOURCE
	{
		name = LiquidFuel
		amount = 2
		maxAmount = 2
	}
	MODULE
	{
		name = ModuleAlternator
		RESOURCE
		{
			name = ElectricCharge
			rate = 5
		}
	}
	fx_exhaustFlame_white_tiny = -0.0, -0.6, -0.00, 0.0, 1.0, 0.0, running
	sound_vent_medium = engage
	sound_rocket_mini = running
	sound_vent_soft = disengage
	sound_explosion_low = flameout
	emissiveConstant = 0.8 // engine nozzles are good at radiating.
	MODULE
	{
		name = ModuleEngines
		thrustVectorTransformName = thrustTransform
		exhaustDamage = False
		ignitionThreshold = 0.1
		minThrust = 0
		maxThrust = 1
		heatProduction = 3
		fxOffset = 0.0, -1.0, 0.02
		EngineType = Turbine
		PROPELLANT
		{
			name = LiquidFuel
			ratio = 0.01
			DrawGauge = True
		}
		atmosphereCurve
		{
			key = 0 19200 0 0
		}
	}
	MODULE
	{
		name = FSbuoyancy
		buoyancyForce = 12.0 // the force applied to lift the part, scaled by depth according to buoyancyRange
		buoyancyRange = 1.0 // the max depth at which the buoyancy will be scaled up. at this depth, the force applied is equal to buyoancyForce. At 0 depth, the force is 0
		buoyancyVerticalOffset = 0.1 // how high the part rides on the water in meters. Not a position offset inside the part. This will be applied in the global axis regardless of part rotation. Think iceberg/styrofoam.
   		maxVerticalSpeed = 0.2 // the max speed vertical speed at which there will be a liftng force applied. Reduces bobbing.
		dragInWater = 1.5 // when in water, apply drag to slow the craft down. Stock drag is 3.
		debugMode = True // enables buoyancy control context menus	
	}
}